// <auto-generated />
using System;
using EFCore.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCore.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Voyages.Voyage", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.ToTable("Voyage");
                });

            modelBuilder.Entity("Domain.YardZones.YardZone", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistanceInMeter")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.ToTable("YardZone");
                });

            modelBuilder.Entity("Domain.Voyages.Voyage", b =>
                {
                    b.OwnsOne("Domain.Voyages.BerthPlan", "BerthPlan", b1 =>
                        {
                            b1.Property<int>("VoyageNumber")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("FromDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("FromMeter")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ToDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("ToMeter")
                                .HasColumnType("int");

                            b1.HasKey("VoyageNumber");

                            b1.ToTable("Voyage");

                            b1.WithOwner()
                                .HasForeignKey("VoyageNumber");
                        });

                    b.Navigation("BerthPlan");
                });

            modelBuilder.Entity("Domain.YardZones.YardZone", b =>
                {
                    b.OwnsMany("Domain.YardZones.Berth", "Berths", b1 =>
                        {
                            b1.Property<int>("YardZoneNumber")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("FromMeter")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ToMeter")
                                .HasColumnType("int");

                            b1.HasKey("YardZoneNumber", "Id");

                            b1.ToTable("Berth");

                            b1.WithOwner()
                                .HasForeignKey("YardZoneNumber");
                        });

                    b.OwnsOne("Domain.YardZones.BerthPlanSheet", "BerthPlanSheet", b1 =>
                        {
                            b1.Property<int>("YardZoneNumber")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("YardZoneNumber");

                            b1.ToTable("YardZone");

                            b1.WithOwner()
                                .HasForeignKey("YardZoneNumber");

                            b1.OwnsMany("Domain.YardZones.BerthPlanPoint", "Points", b2 =>
                                {
                                    b2.Property<DateTime>("Date")
                                        .HasColumnType("datetime2");

                                    b2.Property<int>("ZoneMeter")
                                        .HasColumnType("int");

                                    b2.Property<int>("BerthPlanSheetYardZoneNumber")
                                        .HasColumnType("int");

                                    b2.Property<int>("VoyageNumber")
                                        .HasColumnType("int");

                                    b2.HasKey("Date", "ZoneMeter");

                                    b2.HasIndex("BerthPlanSheetYardZoneNumber");

                                    b2.ToTable("BerthPlanPoint");

                                    b2.WithOwner()
                                        .HasForeignKey("BerthPlanSheetYardZoneNumber");
                                });

                            b1.Navigation("Points");
                        });

                    b.OwnsOne("Domain.YardZones.ZoneDistance", "ZoneDistance", b1 =>
                        {
                            b1.Property<int>("YardZoneNumber")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("YardZoneNumber");

                            b1.ToTable("YardZone");

                            b1.WithOwner()
                                .HasForeignKey("YardZoneNumber");

                            b1.OwnsMany("Domain.YardZones.DistancePoint", "DistancePoints", b2 =>
                                {
                                    b2.Property<int>("MeterNumber")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("BerthName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("ZoneDistanceYardZoneNumber")
                                        .HasColumnType("int");

                                    b2.HasKey("MeterNumber");

                                    b2.HasIndex("ZoneDistanceYardZoneNumber");

                                    b2.ToTable("DistancePoint");

                                    b2.WithOwner()
                                        .HasForeignKey("ZoneDistanceYardZoneNumber");
                                });

                            b1.Navigation("DistancePoints");
                        });

                    b.Navigation("BerthPlanSheet");

                    b.Navigation("Berths");

                    b.Navigation("ZoneDistance");
                });
#pragma warning restore 612, 618
        }
    }
}
